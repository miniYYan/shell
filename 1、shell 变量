1、shell 变量
（1）变量命名规则
    命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
    中间不能有空格，可以使用下划线（_）。
    不能使用标点符号。
    不能使用bash里的关键字（可用help命令查看保留关键字）。

（2）使用变量
    使用一个定义过的变量，只要在变量名前面加$美元符号即可

（3）只读变量
    使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。

（4）删除变量
    使用 unset 命令可以删除变量（unset variable_name）。
    变量被删除后不能再次使用。unset 命令不能删除只读变量。

（5）变量类型
    局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
    环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
    shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

2、Shell 字符串
（1）单引号
    str='this is a string'
    单引号字符串的限制：
    单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
    单引号字串中不能出现单引号（对单引号使用转义符后也不行）。

（2）双引号
    your_name='qinjx'
    str="Hello, I know you are \"$your_name\"! \n"
    双引号的优点：
    双引号里可以有变量
    双引号里可以出现转义字符

（3）拼接字符串
    your_name="qinjx"
    greeting="hello, "$your_name" !"
    greeting_1="hello, ${your_name} !"
    echo $greeting $greeting_1

（4）获取字符串长度
    string="abcd"
    echo ${#string} #输出 4

（5）提取子字符串
    以下实例从字符串第 2 个字符开始截取 4 个字符：
    string="runoob is a great site"
    echo ${string:1:4} # 输出 unoo

（6）查找子字符串
    查找字符 "i 或 s" 的位置：
    string="runoob is a great company"
    echo `expr index "$string" is`  # 输出 8

3、shell数组
    bash支持一维数组（不支持多维数组），并且没有限定数组的大小。

（1）定义数组
    在Shell中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
        数组名=(值1 值2 ... 值n)
    例如：
    array_name=(value0 value1 value2 value3)

（2）读取数组
    读取数组元素值的一般格式是：
        ${数组名[下标]}
    例如：
        value=${array_name[n]}
    使用@符号可以获取数组中的所有元素，例如：
        echo ${array_name[@]}

（3）获取数组的长度
    获取数组长度的方法与获取字符串长度的方法相同，例如：
    # 取得数组元素的个数
    length=${#array_name[@]}
    # 或者
    length=${#array_name[*]}
    # 取得数组单个元素的长度
    lengthn=${#array_name[n]}